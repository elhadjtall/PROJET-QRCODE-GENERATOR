"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const core_1 = require("@jimp/core");
const js_jpeg_1 = __importDefault(require("@jimp/js-jpeg"));
const js_png_1 = __importDefault(require("@jimp/js-png"));
require("@jimp/test-utils/image-snapshot");
const test_utils_1 = require("@jimp/test-utils");
const blit = __importStar(require("./index.js"));
const Jimp = (0, core_1.createJimp)({ formats: [js_jpeg_1.default, js_png_1.default], plugins: [blit.methods] });
(0, vitest_1.describe)("Blit over image", function () {
    (0, vitest_1.test)("blit alpha", async () => {
        const dice = await Jimp.read((0, test_utils_1.getTestImagePath)("dice.png"));
        const image = await Jimp.read((0, test_utils_1.getTestImagePath)("cops.jpg"));
        const output = await image.blit({ src: dice }).getBuffer("image/png");
        (0, vitest_1.expect)(output).toMatchImageSnapshot();
    });
    async function createCat(catNum, len) {
        const imgHeight = 60;
        const butt = await Jimp.read(__dirname + "/images/cat_butt.png");
        const head = await Jimp.read(__dirname + "/images/cat_head.png");
        const fuzz = await Jimp.read(__dirname + "/images/cat_fuzz.png");
        let longCat = len;
        longCat = longCat > 20 ? 20 : longCat;
        longCat = longCat <= 1 ? 1 : longCat;
        const cat = Math.floor(catNum * (head.bitmap.height / imgHeight)) * imgHeight;
        const newImage = new Jimp({
            width: butt.bitmap.width + head.bitmap.width + fuzz.bitmap.width * longCat,
            height: imgHeight,
            color: 0x00000000,
        });
        newImage.blit({
            src: butt,
            x: 0,
            y: 0,
            srcX: 0,
            srcY: cat,
            srcW: butt.bitmap.width,
            srcH: imgHeight,
        });
        for (let i = 0; i < longCat; i++) {
            newImage.blit({
                src: fuzz,
                x: butt.bitmap.width + fuzz.bitmap.width * i,
                y: 0,
                srcX: 0,
                srcY: cat,
                srcW: fuzz.bitmap.width,
                srcH: imgHeight,
            });
        }
        newImage.blit({
            src: head,
            x: butt.bitmap.width + fuzz.bitmap.width * longCat,
            y: 0,
            srcX: 0,
            srcY: cat,
            srcW: head.bitmap.width,
            srcH: imgHeight,
        });
        return newImage;
    }
    (0, vitest_1.test)("uses src params correctly", async () => {
        const small = await createCat(0.3, 1);
        (0, vitest_1.expect)(await small.getBuffer("image/png")).toMatchImageSnapshot();
        const medium = await createCat(0.6, 7);
        (0, vitest_1.expect)(await medium.getBuffer("image/png")).toMatchImageSnapshot();
        const large = await createCat(0.9, 20);
        (0, vitest_1.expect)(await large.getBuffer("image/png")).toMatchImageSnapshot();
    });
});
//# sourceMappingURL=index.node.test.js.map